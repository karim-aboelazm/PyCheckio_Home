type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    MORSE = {
        ".-": "a",
        "-...": "b",
        "-.-.": "c",
        "-..": "d",
        ".": "e",
        "..-.": "f",
        "--.": "g",
        "....": "h",
        "..": "i",
        ".---": "j",
        "-.-": "k",
        ".-..": "l",
        "--": "m",
        "-.": "n",
        "---": "o",
        ".--.": "p",
        "--.-": "q",
        ".-.": "r",
        "...": "s",
        "-": "t",
        "..-": "u",
        "...-": "v",
        ".--": "w",
        "-..-": "x",
        "-.--": "y",
        "--..": "z",
        "-----": "0",
        ".----": "1",
        "..---": "2",
        "...--": "3",
        "....-": "4",
        ".....": "5",
        "-....": "6",
        "--...": "7",
        "---..": "8",
        "----.": "9",
    }


    def morse_decoder(code):
        code = code.split('   ')
        newCode = []
        out_put = []

        for word in code:
            newCode.append(word.split(' '))

        for word in newCode:
            out = ''
            for i in word:
                if i in MORSE:
                    out += MORSE[i]

            out_put.append(out)
        return ' '.join(out_put).capitalize()


    if __name__ == "__main__":
        print("Example:")
        print(morse_decoder("... --- ..."))

        # These "asserts" using only for self-checking and not necessary for auto-testing
        assert morse_decoder("... --- -- .   - . -..- -") == "Some text"
        assert morse_decoder("..--- ----- .---- ---..") == "2018"
        assert (
            morse_decoder(".. -   .-- .- ...   .-   --. --- --- -..   -.. .- -.--")
            == "It was a good day"
        )
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  MORSE = {
      ".-": "a",
      "-...": "b",
      "-.-.": "c",
      "-..": "d",
      ".": "e",
      "..-.": "f",
      "--.": "g",
      "....": "h",
      "..": "i",
      ".---": "j",
      "-.-": "k",
      ".-..": "l",
      "--": "m",
      "-.": "n",
      "---": "o",
      ".--.": "p",
      "--.-": "q",
      ".-.": "r",
      "...": "s",
      "-": "t",
      "..-": "u",
      "...-": "v",
      ".--": "w",
      "-..-": "x",
      "-.--": "y",
      "--..": "z",
      "-----": "0",
      ".----": "1",
      "..---": "2",
      "...--": "3",
      "....-": "4",
      ".....": "5",
      "-....": "6",
      "--...": "7",
      "---..": "8",
      "----.": "9",
  }


  def morse_decoder(code):
      code = code.split('   ')
      newCode = []
      out_put = []

      for word in code:
          newCode.append(word.split(' '))

      for word in newCode:
          out = ''
          for i in word:
              if i in MORSE:
                  out += MORSE[i]

          out_put.append(out)
      return ' '.join(out_put).capitalize()


  if __name__ == "__main__":
      print("Example:")
      print(morse_decoder("... --- ..."))

      # These "asserts" using only for self-checking and not necessary for auto-testing
      assert morse_decoder("... --- -- .   - . -..- -") == "Some text"
      assert morse_decoder("..--- ----- .---- ---..") == "2018"
      assert (
          morse_decoder(".. -   .-- .- ...   .-   --. --- --- -..   -.. .- -.--")
          == "It was a good day"
      )
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 124983
