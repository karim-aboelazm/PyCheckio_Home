type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    from collections import Counter

    def frequency_sort(items):
        counts = Counter(items)
        return sorted(items, key=lambda k: counts[k] * len(items) - items.index(k), reverse=True)


    if __name__ == '__main__':
        print("Example:")
        print(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4]))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 6, 6, 2, 2]
        assert list(frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob'])) == ['bob', 'bob', 'bob', 'carl', 'alex']
        assert list(frequency_sort([17, 99, 42])) == [17, 99, 42]
        assert list(frequency_sort([])) == []
        assert list(frequency_sort([1])) == [1]
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  from collections import Counter

  def frequency_sort(items):
      counts = Counter(items)
      return sorted(items, key=lambda k: counts[k] * len(items) - items.index(k), reverse=True)


  if __name__ == '__main__':
      print("Example:")
      print(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4]))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])) == [4, 4, 4, 4, 6, 6, 2, 2]
      assert list(frequency_sort(['bob', 'bob', 'carl', 'alex', 'bob'])) == ['bob', 'bob', 'bob', 'carl', 'alex']
      assert list(frequency_sort([17, 99, 42])) == [17, 99, 42]
      assert list(frequency_sort([])) == []
      assert list(frequency_sort([1])) == [1]
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 126244
